name: Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest' # Default for manual triggers
      docker_image_name: # New input for the full Docker image name
        description: 'Full Docker image name (e.g., user/app-name)'
        required: true

jobs:
  deploy:
    runs-on: [self-hosted, deploy-ec2]
    if: github.event.action == 'deploy-to-ec2'

    steps:
      - name: Get image tag and name from workflow dispatch
        run: |
          # Use client_payload if triggered by repository_dispatch, otherwise use inputs (for manual trigger)
          DEPLOY_IMAGE_TAG="${{ github.event.client_payload.image_tag || github.event.inputs.image_tag }}"
          DEPLOY_DOCKER_IMAGE_NAME="${{ github.event.client_payload.docker_image_name || github.event.inputs.docker_image_name }}"

          echo "::notice::Received request to deploy image: ${DEPLOY_DOCKER_IMAGE_NAME}:${DEPLOY_IMAGE_TAG}"
          echo "IMAGE_TAG=${DEPLOY_IMAGE_TAG}" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_NAME=${DEPLOY_DOCKER_IMAGE_NAME}" >> $GITHUB_ENV

      - name: Log in to Docker Hub (if private repo)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deploy application on EC2
        run: |
          IMAGE="${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          CONTAINER_NAME="your-express-app-container-name" # Ensure this matches your desired container name
          HOST_PORT="80"
          CONTAINER_PORT="3000" # Ensure this matches your Express app's port

          echo "Deploying ${IMAGE} to EC2..."

          echo "Stopping and removing old container if it exists..."
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true

          echo "Pulling new image: ${IMAGE}"
          docker pull ${IMAGE}

          echo "Running new container..."
          docker run -d --name $CONTAINER_NAME -p $HOST_PORT:$CONTAINER_PORT ${IMAGE}

          echo "Deployment successful for image: ${IMAGE}"