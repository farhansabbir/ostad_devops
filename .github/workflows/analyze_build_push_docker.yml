name: Analyze and Build CI/CD
on:
  push:
    branches:
      - "assignment/sonarqube" # Trigger on pushes to this branch
    tags:
      - "v*.*.*" # Trigger on Git tags like v1.0.0
  pull_request:
    branches:
      - "main" # Trigger on pull requests to main

env:
  # Define DOCKER_IMAGE_NAME at the workflow level for global access
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/nextjs

jobs:
  sonarqube_analysis: # Renamed for clarity - 'sonarqube' was also a job name, can cause confusion
    name: SonarQube Analyze and Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Ensure Node.js is set up for your project's build/lint

      - name: Install dependencies
        run: npm install # Install dependencies for ESLint/SonarQube to work correctly

      # Optional: Re-enable ESLint when ready
      # - name: Run ESLint
      #   run: npm run lint

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master # Use a specific version for stability
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Pass the host URL as env var

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@master # Use a specific version for stability
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Pass the host URL as env var

  build_and_push_docker_image:
    needs: sonarqube_analysis # Depend on the new job name
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # Define when this job should run: on successful completion of 'sonarqube_analysis'
    # AND when the push is to a Git tag (for production deployments)
    # OR if you want to push to Docker Hub from 'main' branch, include it here.
    # Current condition: Only builds/pushes on `main` branch pushes OR `v*.*.*` tag pushes
    if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/assignment/sonarqube')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine Docker Image Tag
        id: get_tag
        run: |
          # Default to 'latest' for non-tag pushes (e.g., if main branch pushes use 'latest')
          IMAGE_TAG="latest"
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            IMAGE_TAG="${{ github.ref_name }}" # Use the Git tag name directly
            echo "::notice file=ci.yml::Workflow triggered by tag: $IMAGE_TAG"
          else
            echo "::notice file=ci.yml::Workflow triggered by branch push. Using 'latest' tag."
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT # Set as output for subsequent steps
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Use DOCKERHUB_TOKEN as it's the secret name

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.get_tag.outputs.IMAGE_TAG }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trigger Self-Hosted Runner for Deployment
        # This step runs only if the current workflow was triggered by a Git tag push AND successful
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: |
          IMAGE_TAG="${{ steps.get_tag.outputs.IMAGE_TAG }}"
          echo "Dispatching deployment workflow to self-hosted runner for tag: $IMAGE_TAG"
          curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GH_PAT_DISPATCH }}" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{
            "event_type": "deploy-to-ec2",
            "client_payload": {
              "image_tag": "'"$IMAGE_TAG"'",
              "docker_image_name": "${{ env.DOCKER_IMAGE_NAME }}"
            }
          }'