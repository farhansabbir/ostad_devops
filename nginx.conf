server {
    listen 3000;
    server_name localhost; # Use your actual domain name in production

    # Main location block for Next.js application
    location / {
        root /usr/share/nginx/html; # Points to the WORKDIR in your Dockerfile
        try_files $uri $uri/ /index.html; # Handles Next.js client-side routing
    }

    # Location block for Next.js's internal static assets (e.g., _next/static/...)
    # This ensures long-term caching for these generated files
    location /_next/static/ {
        # Using 'root' instead of 'alias' can be simpler when the URI path directly maps
        # to the file system path relative to the root.
        root /usr/share/nginx/html; # Effectively /usr/share/nginx/html/_next/static/
        expires 1y; # Cache for 1 year
        access_log off; # No need to log these frequent static asset requests
        add_header Cache-Control "public";
    }

    # Location block for other static assets from the 'public' folder.
    # Next.js serves files from the 'public' directory directly from the root URL.
    # So, if you have 'public/favicon.ico', it's accessed at '/favicon.ico'.
    # This block caches common static file types without needing a /static/ subpath
    # unless you specifically organized your public folder this way.
    # If your Dockerfile copies public to /usr/share/nginx/html/public,
    # then requests for /my_image.png will resolve to /usr/share/nginx/html/public/my_image.png
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|xml|json|html|css|js|woff|woff2|ttf|eot)$ {
        root /usr/share/nginx/html/public; # Point to the copied public directory
        expires 30d; # Cache for 30 days
        access_log off;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
        try_files $uri =404; # Ensure only existing files are served
    }


    # Standard error pages (good practice)
    error_page 404 /404.html; # Next.js handles 404 via index.html, but this is for Nginx's internal handling
    location = /404.html {
        internal;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
    }

    # Optional: If you need to proxy API routes back to a Node.js server (e.g., if you have an external API)
    # This is NOT for Next.js API routes that are part of the static export (which usually aren't).
    # If your Next.js app is *not* statically exported, and you are proxying to a Next.js server,
    # then this server block and the Dockerfile would be different.
    # location /api/ {
    #     proxy_pass http://localhost:PORT_OF_NODE_API/;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection 'upgrade';
    #     proxy_set_header Host $host;
    #     proxy_cache_bypass $http_upgrade;
    # }
}